--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sumacc_vasy IS
PORT(
  a	: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel0	: IN STD_LOGIC;
  sel1	: IN STD_LOGIC;
  clk	: IN STD_LOGIC;
  s	: INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
  cout	: OUT STD_LOGIC;
  vdd	: IN STD_LOGIC;
  vss	: IN STD_LOGIC
);
END sumacc_vasy;

ARCHITECTURE RTL OF sumacc_vasy IS
  SIGNAL rtl_internal_cout	: STD_LOGIC;
  SIGNAL rtl_bit_vector_9	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtl_bit_vector_8	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtl_bit_7	: BIT;
  SIGNAL rtl_bit_6	: BIT;
  SIGNAL rtl_bit_5	: BIT;
  SIGNAL rtl_bit_vector_4	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtl_bit_vector_3	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtl_bit_vector_2	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtl_bit_1	: BIT;
  SIGNAL rtl_bit_vector_0	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL outmux0	: STD_LOGIC_VECTOR(3 DOWNTO 0);
  SIGNAL outmux1	: STD_LOGIC_VECTOR(3 DOWNTO 0);
  SIGNAL outacc	: STD_LOGIC_VECTOR(3 DOWNTO 0);
  SIGNAL naoa	: STD_LOGIC_VECTOR(3 DOWNTO 0);
  COMPONENT acc_vasy
  PORT(
  a	: IN BIT_VECTOR(3 DOWNTO 0);
  clk	: IN BIT;
  s	: OUT BIT_VECTOR(3 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT
   );
  END COMPONENT;

  COMPONENT adder_vasy
  PORT(
  a	: IN BIT_VECTOR(3 DOWNTO 0);
  b	: IN BIT_VECTOR(3 DOWNTO 0);
  s	: OUT BIT_VECTOR(3 DOWNTO 0);
  cout	: OUT BIT
   );
  END COMPONENT;

  COMPONENT mux_vasy
  PORT(
  ctrl	: IN BIT;
  a	: IN BIT_VECTOR(3 DOWNTO 0);
  b	: IN BIT_VECTOR(3 DOWNTO 0);
  q	: OUT BIT_VECTOR(3 DOWNTO 0)
   );
  END COMPONENT;

  COMPONENT inv_vasy
  PORT(
  a	: IN BIT_VECTOR(3 DOWNTO 0);
  y	: OUT BIT_VECTOR(3 DOWNTO 0)
   );
  END COMPONENT;

BEGIN
  cout <= rtl_internal_cout;
  rtl_bit_vector_9 <= to_bitvector(naoa);
  rtl_bit_vector_8 <= to_bitvector(a);
  rtl_bit_7 <= to_bit(sel0);
  rtl_bit_6 <= to_bit(sel1);
  rtl_bit_5 <= to_bit(rtl_internal_cout);
  rtl_bit_vector_4 <= to_bitvector(s);
  rtl_bit_vector_3 <= to_bitvector(outmux0);
  rtl_bit_vector_2 <= to_bitvector(outacc);
  rtl_bit_1 <= to_bit(clk);
  rtl_bit_vector_0 <= to_bitvector(outmux1);
  accumulator : acc_vasy
  PORT MAP (
    a => rtl_bit_vector_0,
    clk => rtl_bit_1,
    s => rtl_bit_vector_2
  );
  adder : adder_vasy
  PORT MAP (
    a => rtl_bit_vector_3,
    b(3 downto 0) => rtl_bit_vector_2,
    s => rtl_bit_vector_4,
    cout => rtl_bit_5
  );
  mux1 : mux_vasy
  PORT MAP (
    ctrl => rtl_bit_6,
    a => rtl_bit_vector_3,
    b(3 downto 0) => rtl_bit_vector_4,
    q(3 downto 0) => rtl_bit_vector_0
  );
  mux0 : mux_vasy
  PORT MAP (
    ctrl => rtl_bit_7,
    a => rtl_bit_vector_8,
    b(3 downto 0) => rtl_bit_vector_9,
    q(3 downto 0) => rtl_bit_vector_3
  );
  inversor : inv_vasy
  PORT MAP (
    a => rtl_bit_vector_8,
    y(3 downto 0) => rtl_bit_vector_9
  );
END RTL;
